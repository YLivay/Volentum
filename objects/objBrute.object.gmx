<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBruteAttacking</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>objEnemy</parentName>
  <maskName>sprBigCollision</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movableInit( BRUTE_WANDER_SPEED, BRUTE_WANDER_ACCELERATION, BRUTE_WANDER_DEACCELERATION, BRUTE_MASS, TANGIBLE_ENEMY | TANGIBLE_BY_PLAYER_ATTACK | TANGIBLE_BY_ENEMY, ev_user0 );
enemyAIInit( BRUTE_HP, BRUTE_INVINCIBILITY, 200, 500, 1, 15, sprBruteInjured, ev_user1 );
idleX = x;
idleY = y;

warmUp = 0;
attackFrame = 0;
alreadySlashed = false;
moveFrame = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movableDestroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enemyAIBeginStep();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enemyAIStep();

if ( aiState != aiPrevState ) {
    show_debug_message( concat( 'ai state changed from ', aiPrevState, ' to ', aiState ) );
    if ( aiState == AIStates.ATTACKING ) {
        maxSpeed = 0;
        warmUp = 0;
    }
    else {
        maxSpeed = BRUTE_WANDER_SPEED;
        acceleration = BRUTE_WANDER_ACCELERATION;
        deacceleration = BRUTE_WANDER_DEACCELERATION;
    }
    
    if ( aiState == AIStates.IDLE ) {
        idleX = x;
        idleY = y;
        wanderInit( 5, 50, BRUTE_WANDER_SPEED );
    }
    else if ( aiState == AIStates.SEARCHING ) {
        wanderInit( 3, 200, BRUTE_WANDER_SPEED );
    }
    else if ( aiState == AIStates.STUNNED ) {
        moveFrame = 0;
        attackFrame = 0;
        warmUp = 0;
    }
}

if ( aiState == AIStates.IDLE || aiState == AIStates.SEARCHING ) {
    wanderStep();
}
else if ( aiState == AIStates.ATTACKING ) {
    warmUp = min( warmUp + ( 1 * global.timescale ) / ( BRUTE_WARMUP_DURATION * room_speed ), 1 );
    maxSpeed = lerp( BRUTE_WANDER_SPEED, BRUTE_SPEED, warmUp );
    acceleration = lerp( BRUTE_WANDER_ACCELERATION, BRUTE_ACCELERATION, warmUp );
    
    beelineStep( objFormation.x, objFormation.y, maxSpeed, 80 );
    if ( point_distance( x, y, objFormation.x, objFormation.y ) &lt;= 80 &amp;&amp; attackFrame == 0 ) {
        warmUp = 0;
        attackFrame += 0.2 * global.timescale;
        alreadySlashed = false;
    }
}
else {
    movableStep( 0, 0 );
}

if ( attackFrame &gt; 0 ) {
    warmUp = 0;
    attackFrame += 0.2 * global.timescale;
    if ( attackFrame &gt;= 4 &amp;&amp; !alreadySlashed ) {
        slashCreate( objBruteSlash, x, y, point_direction( x, y, objFormation.x, objFormation.y ), BRUTE_SLASH_DAMAGE, BRUTE_SLASH_KNOCKBACK, id );
        alreadySlashed = true;
    }
    else if ( attackFrame &gt;= sprite_get_number( sprBruteAttacking ) ) {
        attackFrame = 0;
    }
}

if ( x == xprevious &amp;&amp; y == yprevious ) {
    moveFrame = 0;
}

depth = -y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( aiState == AIStates.ATTACKING &amp;&amp; attackFrame &gt; 0 ) {
    sprite_index = sprBruteAttacking;
    image_index = attackFrame;
}
else {
    enemyAIPrepareDraw( sprBruteIdle, sprBruteMoving );
}

if ( currentInvincibility &lt;= 0 || floor( currentInvincibility / ( room_speed / 14 ) ) mod 2 == 1 ) {
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
