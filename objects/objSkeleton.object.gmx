<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSkeletonIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>objEnemy</parentName>
  <maskName>sprSmallCollision</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

movableInit( SKELETON_SPEED, SKELETON_ACCELERATION, SKELETON_DEACCELERATION, SKELETON_MASS, TANGIBLE_ENEMY | TANGIBLE_BY_PLAYER_ATTACK | TANGIBLE_BY_ENEMY, ev_user0 );
enemyAIInit( SKELETON_HP, SKELETON_INVINCIBILITY, 200, 500, 1, 15, sprSkeletonInjured, ev_user1 );
idleX = x;
idleY = y;

enum SkeletonStates {
    WAITING_TO_ATTACK,
    ATTACKING,
    CHASING,
}

skeleState = SkeletonStates.CHASING;
alreadySlashed = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if ( aiState != aiPrevState ) {
    skeleState = SkeletonStates.CHASING;
    if ( aiState == AIStates.IDLE ) {
        idleX = x;
        idleY = y;
        wanderInit( 5, 50, maxSpeed * 0.3 );
    }
    else if ( aiState == AIStates.SEARCHING ) {
        wanderInit( 3, 200, maxSpeed );
    }
}

if ( aiState == AIStates.IDLE || aiState == AIStates.SEARCHING ) {
    wanderStep();
}
else if ( aiState == AIStates.ATTACKING ) {
    var dist = point_distance( x, y, objFormation.x, objFormation.y );
    switch ( skeleState ) {
        case SkeletonStates.CHASING:
            if ( dist &gt; SKELETON_ATTACK_RANGE ) {
                beelineStep( objFormation.x, objFormation.y, maxSpeed, SKELETON_ATTACK_RANGE );
            }
            else {
                attackDelay = SKELETON_ATTACK_DELAY * room_speed;
                skeleState = SkeletonStates.WAITING_TO_ATTACK;
                movableStep( 0, 0 );
            }
            break;
        
        case SkeletonStates.WAITING_TO_ATTACK:
            attackDelay = max( attackDelay - 1 * global.timescale, 0 );
            if ( attackDelay &lt;= 0 ) {
                skeleState = SkeletonStates.ATTACKING;
                attackFrame = 0;
                alreadySlashed = false;
            }
            movableStep( 0, 0 );
            break;
        
        case SkeletonStates.ATTACKING:
            attackFrame += 0.2 * global.timescale;
            if ( attackFrame &gt;= 2 &amp;&amp; !alreadySlashed ) {
                slashCreate( objSkeletonSlash, x, y, point_direction( x, y, objFormation.x, objFormation.y ), SKELETON_SLASH_DAMAGE, SKELETON_SLASH_KNOCKBACK, id );
                alreadySlashed = true;
            }
            
            if ( attackFrame &gt;= sprite_get_number( sprSkeletonAttacking ) ) {
                skeleState = SkeletonStates.CHASING;
            }
            movableStep( 0, 0 );
            break;
    }
}
else {
    movableStep( 0, 0 );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( aiState == AIStates.ATTACKING &amp;&amp; skeleState == SkeletonStates.ATTACKING ) {
    sprite_index = sprSkeletonAttacking;
    image_index = attackFrame;
}
else if ( aiState == AIStates.ATTACKING &amp;&amp; skeleState == SkeletonStates.WAITING_TO_ATTACK ) {
    sprite_index = sprSkeletonAttacking;
    image_index = 0;
}
else {
    enemyAIPrepareDraw( sprSkeletonIdle, sprSkeletonMoving );
}

if ( currentInvincibility &lt;= 0 || floor( currentInvincibility / ( room_speed / 14 ) ) mod 2 == 1 ) {
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
