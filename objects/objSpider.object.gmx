<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSpiderMoving</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>objEnemy</parentName>
  <maskName>sprSmallCollision</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

movableInit( SPIDER_SPEED, SPIDER_ACCELERATION, SPIDER_DEACCELERATION, SPIDER_MASS, TANGIBLE_ENEMY | TANGIBLE_BY_PLAYER_ATTACK, ev_user0 );
enemyAIInit( SPIDER_HP, SPIDER_INVINCIBILITY, 200, 350, 1, 15, sprSpiderInjured, ev_user1 );
idleX = x;
idleY = y;

enum SpiderStates {
    BEELINING,
    CIRCLING,
    JUMPING,
    CHARGING_POUNCE,
    POUNCING,
}
spiderState = SpiderStates.BEELINING;
currentJumpHeight = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enemyAIStep();

if ( aiState != aiPrevState ) {
    isCircling = false;
    tangible = TANGIBLE_ENEMY | TANGIBLE_BY_PLAYER_ATTACK;
    if ( aiState == AIStates.IDLE ) {
        idleX = x;
        idleY = y;
        wanderInit( 5, 50, maxSpeed * 0.3 );
    }
    else if ( aiState == AIStates.SEARCHING ) {
        wanderInit( 3, 200, maxSpeed );
    }
    else if ( aiState == AIStates.ATTACKING ) {
        attackDelay = random_range( SPIDER_ATTACK_MIN_DELAY, SPIDER_ATTACK_MAX_DELAY ) * room_speed;
    }
    
    if ( aiState == AIStates.STUNNED ) {
        restoreStunState = aiState;
        restoreStunSpiderState = spiderState;
    }
    else if ( aiPrevState == AIStates.STUNNED) {
        if ( restoreStunState == AIStates.ATTACKING &amp;&amp; ( restoreStunSpiderState == SpiderStates.JUMPING || restoreStunSpiderState == SpiderStates.POUNCING ) ) {
            aiState = AIStates.ATTACKING;
            spiderState = restoreStunSpiderState;
        }
    }
    else {
        spiderState = SpiderStates.BEELINING;
    }
}

if ( aiState == AIStates.IDLE || aiState == AIStates.SEARCHING ) {
    wanderStep();
}
else if ( aiState == AIStates.ATTACKING ) {
    switch ( spiderState ) {
        case SpiderStates.BEELINING:
            if ( point_distance( x, y, objFormation.x, objFormation.y ) &gt; SPIDER_MAX_CIRCLE_RADIUS ) {
                beelineStep( objFormation.x, objFormation.y, SPIDER_SPEED, 50 );
                break;
            }
            else {
                circleAroundInit( objFormation.x, objFormation.y, irandom_range( SPIDER_MIN_CIRCLE_RADIUS, SPIDER_MAX_CIRCLE_RADIUS ), SPIDER_MAX_JUMP );
                circleSpeedVariation = SPIDER_CIRCLE_SPEED * random_range( 0.8, 1 );
                spiderState = SpiderStates.CIRCLING;
            }
        
        case SpiderStates.CIRCLING:
            tangible = TANGIBLE_INTANGIBLE | TANGIBLE_BY_PLAYER_ATTACK;
            if ( point_distance( x, y, objFormation.x, objFormation.y ) &lt; SPIDER_MAX_CIRCLE_RADIUS + 32 ) {
                attackDelay = max( attackDelay - 1 * global.timescale, 0 );
                if ( attackDelay &lt;= 0 ) {
                    chargeDelay = SPIDER_ATTACK_CHARGE_DELAY * room_speed;
                    attackFrame = 0;
                    spiderState = SpiderStates.CHARGING_POUNCE;
                }
                else {
                    circleAroundStep( objFormation.x, objFormation.y, circleSpeedVariation );
                    if ( circleAroundNeedsJump ) {
                        jumpInit( circleAroundDestX, circleAroundDestY, circleSpeedVariation, point_distance( x, y, circleAroundDestX, circleAroundDestY ) / 3 );
                        circleAroundNeedsJump = false;
                        spiderState = SpiderStates.JUMPING;
                        break;
                    }
                }
            }
            else {
                beelineStep( objFormation.x, objFormation.y, SPIDER_SPEED, 50 );
                spiderState = SpiderStates.BEELINING;
            }
            break;
        
        case SpiderStates.JUMPING:
            if ( jumpStep() ) {
                spiderState = SpiderStates.CIRCLING;
            }
            break;
        
        case SpiderStates.CHARGING_POUNCE:
            chargeDelay = max( chargeDelay - 1 * global.timescale, 0 );
            if ( chargeDelay &lt;= 0 ) {
                jumpInit( objFormation.x, objFormation.y, SPIDER_ATTACK_SPEED, point_distance( x, y, objFormation.x, objFormation.y ) / 3 );
                spiderState = SpiderStates.POUNCING;
            }
            
            attackFrame += 0.2 * global.timescale;
            if ( attackFrame &gt;= 2 ) {
                attackFrame -= 2;
            }
            break;
            
        case SpiderStates.POUNCING:
            if ( jumpStep() ) {
                slashCreate( objSpiderSplash, x, y, point_direction( xprevious, yprevious, x, y ), SPIDER_ATTACK_DAMAGE, SPIDER_ATTACK_KNOCKBACK, id );
                attackDelay = random_range( SPIDER_ATTACK_MIN_DELAY, SPIDER_ATTACK_MAX_DELAY ) * room_speed;
                spiderState = SpiderStates.BEELINING;
            }
            break;
    }
}
else {
    movableStep( 0, 0 );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( spiderState == SpiderStates.JUMPING || spiderState == SpiderStates.POUNCING ) {
    sprite_index = sprSpiderJumping;
    image_index = 2;
}
else if ( spiderState == SpiderStates.JUMPING &amp;&amp; spiderState == SpiderStates.CHARGING_POUNCE ) {
    sprite_index = sprSpiderJumping;
    image_index = attackFrame;
}
else {
    enemyAIPrepareDraw( sprSpiderMoving, sprSpiderMoving );
}

if ( currentInvincibility &lt;= 0 || floor( currentInvincibility / ( room_speed / 14 ) ) mod 2 == 1 ) {
    draw_sprite_ext( sprite_index, image_index, x, y - currentJumpHeight, image_xscale * 0.7, image_yscale * 0.7, image_angle, image_blend, image_alpha );
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
