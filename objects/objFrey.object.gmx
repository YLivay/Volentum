<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFreyStanding</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>characterInit( Characters.FREY );

isRaging = false;
nextRageSlash = 0;
rageTime = 0;

isAttacking = true;
attackDelay = 0;
attackFrame = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movableDestroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>characterBeginStep();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>characterStep();

if ( global.selectedCharacter == character ) {
    if ( !isRaging &amp;&amp; attackDelay == 0 &amp;&amp; isKeyDown( Keys.ACTION ) ) {
        isAttacking = true;
        attackFrame = 0;
        show_debug_message( 'Executing slash' );
        
        slashCreate( objFreySlash, objFormation.x, objFormation.y, characterDirection( 1 ), SLASH_DAMAGE, SLASH_KNOCKBACK, objFormation.id );
        attackDelay = SLASH_INTERVAL * room_speed;
    }
    else if ( focus == 100 &amp;&amp; isKeyPressed( Keys.SPECIAL ) ) {
        show_debug_message( 'LEEEEROYYYYYY JEENNNNKINNNSS!!!' );
        
        focus = 0;
        isRaging = true;
        attackFrame = 0;
        nextRageSlash = 0;
        rageTime = BERSERK_DURATION * room_speed;
    }
}

attackDelay = max( attackDelay - 1 * global.timescale, 0 );

if ( isRaging ) {
    rageTime = max( rageTime - 1 * global.timescale, 0 );
    if ( rageTime ) {
        nextRageSlash = max( nextRageSlash - 1 * global.timescale, 0 );
        attackFrame += 0.55 * global.timescale;
        if ( nextRageSlash &lt;= 0 ) {
            nextRageSlash = BERSERK_SLASH_INTERVAL;
            var hasKnockback = random( 100 ) &lt; BERSERK_KNOCKBACK_CHANCE;
            var slashKnockback = BERSERK_SLASH_KNOCKBACK;
            if ( !hasKnockback ) {
                slashKnockback = 0;
            }
            var slash = slashCreate( objFreySlash, objFormation.x, objFormation.y, random( 360 ), BERSERK_SLASH_DAMAGE, slashKnockback, objFormation.id );
            slash.image_yscale *= random_range( 0.5, 1.2 ) * 1.3;
            slash.image_xscale *= random_range( 0.7, 1.5 ) * 1.3;
        }
    }
    else {
        isRaging = false;
    }
}
else if ( isAttacking ) {
    attackFrame += 0.25 * global.timescale;
    if ( attackFrame &gt;= 6 ) {
        isAttacking = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var back = undefined;
if ( isAttacking ) {
    back = spriteMap[? CharacterSprites.ATTACK_BACK];
}
else if ( isRaging ) {
    back = sprFreyBackRaging;
}

if ( back != undefined ) {
    draw_sprite_ext( back, attackFrame, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha );
}

characterDraw( !isAttacking &amp;&amp; !isRaging );

var upper = undefined;
if ( isAttacking ) {
    upper = spriteMap[? CharacterSprites.ATTACK_UPPER];
}
else if ( isRaging ) {
    upper = sprFreyUpperRaging;
}

if ( upper != undefined ) {
    draw_sprite_ext( upper, attackFrame, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
