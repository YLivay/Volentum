<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDarkMageIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>objEnemy</parentName>
  <maskName>sprSmallCollision</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movableInit( 0, DARK_MAGE_ACCELERATION, DARK_MAGE_DEACCELERATION, DARK_MAGE_MASS, TANGIBLE_ENEMY | TANGIBLE_BY_PLAYER_ATTACK, ev_user0 );
enemyAIInit( DARK_MAGE_HP, DARK_MAGE_INVINCIBILITY, DARK_MAGE_MIN_TELEPORT_RANGE, 1000, 1, 0, sprDarkMageInjured, ev_user1 );

enum DarkMageStates {
    WAITING_TO_ATTACK,
    CHARGING_ATTACK,
    ATTACKING,
}

dmState = DarkMageStates.WAITING_TO_ATTACK;
attackDelay = 0;
chargeDelay = 0;
attackFrame = 0;
show_message( 'hi' );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movableDestroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enemyAIBeginStep();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enemyAIStep();

if ( aiState != aiPrevState ) {
    show_debug_message( concat( 'ai state changed from ', aiPrevState, ' to ', aiState ) );
    dmState = DarkMageStates.WAITING_TO_ATTACK;
    attackDelay = DARK_MAGE_ATTACK_DELAY * room_speed;
    chargeDelay = 0;
    attackFrame = 0;
}

if ( aiState != AIStates.STUNNED &amp;&amp; aiState != AIStates.DYING ) {
    var dist = point_distance( x, y, objFormation.x, objFormation.y );
    if ( dist &lt; DARK_MAGE_AVOID_RANGE || ( aiState == AIStates.ATTACKING &amp;&amp; dist &gt; DARK_MAGE_CHASE_RANGE ) ) {
        if ( avoidFindNext( objFormation.x, objFormation.y, DARK_MAGE_MIN_TELEPORT_RANGE, DARK_MAGE_MAX_TELEPORT_RANGE ) ) {
            x = avoidDestX;
            y = avoidDestY;
            xSpeed = 0;
            ySpeed = 0;
        }
    }
}

if ( aiState == AIStates.ATTACKING ) {
    switch ( dmState ) {
        case DarkMageStates.WAITING_TO_ATTACK:
            attackDelay = max( attackDelay - 1 * global.timescale, 0 );
            if ( attackDelay &lt;= 0 ) {
                show_debug_message( 'Reached attack delay 0, charging attack' );
                chargeDelay = DARK_MAGE_ATTACK_CHARGE_DURATION * room_speed;
                dmState = DarkMageStates.CHARGING_ATTACK;
                audio_play_sound( sndMagicCharge, 0, false );
            }
            break;
        
        case DarkMageStates.CHARGING_ATTACK:
            chargeDelay = max( chargeDelay - 1 * global.timescale, 0 );
            if ( chargeDelay &lt;= 0 ) {
                show_debug_message( 'Reached attack charge 0, attacking' );
                projectileShoot( objDarkMageProjectile, x, y, DARK_MAGE_PROJECTILE_SPEED, point_direction( x, y, objFormation.x, objFormation.y ), DARK_MAGE_PROJECTILE_DAMAGE, DARK_MAGE_PROJECTILE_KNOCKBACK, false );
                dmState = DarkMageStates.ATTACKING;
            }
            else {
                attackFrame += 0.2 * global.timescale;
                if ( attackFrame &gt;= 8 ) {
                    attackFrame = 4;
                }
            }
            break;
        
        case DarkMageStates.ATTACKING:
            attackFrame += 0.2 * global.timescale;
            if ( attackFrame &gt;= sprite_get_number( sprDarkMageAttacking ) ) {
                show_debug_message( 'Finished playing attack animation. Waiting to attack' );
                attackDelay = DARK_MAGE_ATTACK_DELAY * room_speed;
                chargeDelay = 0;
                attackFrame = 0;
                dmState = DarkMageStates.WAITING_TO_ATTACK;
            }
            break;
    }
}
else {
    if ( random( 100 ) &lt; 1 ) {
        image_xscale *= -1;
    }
}
movableStep( 0, 0 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( aiState == AIStates.ATTACKING ) {
    image_xscale = sign( objFormation.x - x );
    if ( image_xscale == 0 ) {
        image_xscale = 1;
    }
}

if ( aiState == AIStates.ATTACKING &amp;&amp; dmState != DarkMageStates.WAITING_TO_ATTACK ) {
    sprite_index = sprDarkMageAttacking;
    image_index = attackFrame;
}
else {
    enemyAIPrepareDraw( sprDarkMageIdle, sprDarkMageIdle );
}

if ( currentInvincibility &lt;= 0 || floor( currentInvincibility / ( room_speed / 14 ) ) mod 2 == 1 ) {
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
