<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAlfStanding</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>characterInit( Characters.ALF );

isBarrierActive = 0;
isAttacking = false;
attackFrame = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movableDestroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>characterBeginStep();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>characterStep();
show_debug_message( 'Alf focus: ' + string( focus ) );

if ( global.selectedCharacter == character ) {
    if ( isKeyDown( Keys.ACTION ) ) {
        focus = max( focus - FOCUS_REPLENISH * global.timescale / room_speed, 0 );
        focus = max( focus - BARRIER_FOCUS_CONSUMPTION * global.timescale / room_speed, 0 );
        
        // Check focus again to stop the animation loop if we're out of force
        if ( focus &gt; 0 ) {
            isAttacking = true;
            if ( attackFrame &gt;= 10 ) {
                attackFrame = 5;
            }
        }
    }
    else if ( focus == 100 &amp;&amp; isKeyPressed( Keys.SPECIAL ) ) {
        show_debug_message( 'Executing fireball' );
        focus = 0;
        
        isAttacking = true;
        attackFrame = 0;
        
        var fireballDirection = characterDirection( 1 );
        var throwX = x + lengthdir_x( FIREBALL_DISTANCE, fireballDirection );
        var throwY = y + lengthdir_y( FIREBALL_DISTANCE, fireballDirection );
        projectileThrow( objFireball, x + 17 * sign( lengthdir_x( 1, fireballDirection ) ), y - 22, throwX, throwY, FIREBALL_SPEED, FIREBALL_DISTANCE / 2, FIREBALL_DAMAGE, FIREBALL_KNOCKBACK, true );
    }
    
    isBarrierActive = focus &gt; 0 &amp;&amp; isKeyDown( Keys.ACTION );
}
else {
    isBarrierActive = false;
}

if ( isAttacking ) {
    attackFrame += 0.35 * global.timescale;
    if ( attackFrame &gt;= sprite_get_number( sprAlfUpperAttacking ) ) {
        isAttacking = false;
        attackFrame = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var back = undefined;
if ( isAttacking ) {
    back = spriteMap[? CharacterSprites.ATTACK_BACK];
}

if ( back != undefined ) {
    draw_sprite_ext( back, attackFrame, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha );
}

characterDraw( !isAttacking );

var upper = undefined;
if ( isAttacking ) {
    upper = spriteMap[? CharacterSprites.ATTACK_UPPER];
}

if ( upper != undefined ) {
    draw_sprite_ext( upper, attackFrame, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha );
}

if ( isBarrierActive ) {
    draw_sprite( sprBarrier, 0, x, y );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
