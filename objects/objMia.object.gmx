<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMiaStanding</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>characterInit( Characters.MIA );

isAttacking = false;
letAttackAnimationFinish = false;
arrowCharge = 0;
attackFrame = 0;

isStunning = false;
stunFrame = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movableDestroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>characterBeginStep();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>characterStep();

var nextAttackFrame = attackFrame;
if ( global.selectedCharacter == character ) {
    if ( isKeyDown( Keys.ACTION ) ) {
        isAttacking = true;
        if ( arrowCharge == 0 ) {
            show_debug_message( 'Charging arrow' );
            nextAttackFrame = 0;
        }
        else if ( arrowCharge + 1 * global.timescale &gt;= ARROW_MAX_CHARGE * room_speed ) {
            show_debug_message( 'Full charge reached' );
        }
        else if ( arrowCharge &gt;= ARROW_MIN_CHARGE * room_speed ) {
            nextAttackFrame += 0.2 * global.timescale;
            if ( nextAttackFrame &gt;= 6 ) {
                nextAttackFrame = 4;
            }
        }
        else {
            nextAttackFrame = arrowCharge / ( ARROW_MIN_CHARGE * room_speed ) * 5;
        }
        arrowCharge = min( arrowCharge + 1 * global.timescale, ARROW_MAX_CHARGE * room_speed );
    }
    else if ( focus == 100 &amp;&amp; isKeyDown( Keys.SPECIAL ) ) {
        focus = 0;
        isStunning = true;
        stunFrame = 0;
        audio_play_sound( sndStun, 0, false );
        
        with ( objEnemy ) {
            if ( aiState != AIStates.DYING ) {
                aiState = AIStates.STUNNED;
                stun = STUN_DURATION * room_speed;
            }
        }
    }
}

if ( !global.selectedCharacter || isKeyReleased( Keys.ACTION ) ) {
    if ( arrowCharge &gt; ARROW_MIN_CHARGE * room_speed ) {
        show_debug_message( 'Shooting an arrow' );
        
        projectileShoot( objArrow, x + 17 * sign( lengthdir_x( 1, characterDirection( 1 ) ) ), y - 22, ARROW_SPEED, characterDirection( 1 ), ARROW_DAMAGE, ARROW_KNOCKBACK, true );
        attackFrame = 6;
    }
    else if ( arrowCharge &gt; ARROW_DUD_CHARGE * room_speed ) {
        show_debug_message( 'Shooting a dud' );
        attackFrame = 6;
    }
    else if ( arrowCharge &gt; 0 ) {
        show_debug_message( 'Cancelling shot' );
        attackFrame = 0;
        isAttacking = false;
    }
    arrowCharge = 0;
}

if ( attackFrame &gt;= 6 ) {
    nextAttackFrame = attackFrame + 0.2 * global.timescale;
    if ( nextAttackFrame &gt;= 11 ) {
        attackFrame = 0;
        isAttacking = false;
    }
}

if ( !isAttacking ) {
    nextAttackFrame = 0;
}
attackFrame = nextAttackFrame;

if ( isStunning ) {
    stunFrame += 0.4 * global.timescale;
    if ( stunFrame &gt;= sprite_get_number( sprMiaUpperStun ) ) {
        isStunning = false;
        stunFrame = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>back = undefined;
if ( isStunning ) {
    draw_sprite_ext( sprMiaBackStun, stunFrame, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha );
}
else if ( isAttacking ) {
    back = spriteMap[? CharacterSprites.ATTACK_BACK];
    if ( back != undefined ) {
        draw_sprite_ext( back, attackFrame, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha );
    }
}

characterDraw( !isAttacking &amp;&amp; !isStunning );

upper = undefined;
if ( isStunning ) {
    draw_sprite_ext( sprMiaUpperStun, stunFrame, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha );
}
else if ( isAttacking ) {
    upper = spriteMap[? CharacterSprites.ATTACK_UPPER];
    if ( upper != undefined ) {
        draw_sprite_ext( upper, attackFrame, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha );
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
